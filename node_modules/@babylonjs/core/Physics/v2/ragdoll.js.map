{"version":3,"file":"ragdoll.js","sourceRoot":"","sources":["../../../../../dev/core/src/Physics/v2/ragdoll.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Skeleton } from \"../../Bones/skeleton\";\r\nimport { Vector3, Matrix, TmpVectors } from \"../../Maths/math.vector\";\r\nimport { Quaternion } from \"../../Maths/math.vector\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { PhysicsAggregate } from \"./physicsAggregate\";\r\nimport { BallAndSocketConstraint } from \"./physicsConstraint\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport { Axis, Space } from \"core/Maths/math.axis\";\r\nimport { PhysicsShapeType, PhysicsConstraintType } from \"./IPhysicsEnginePlugin\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Bone } from \"../../Bones/bone\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { TransformNode } from \"../../Meshes/transformNode\";\r\n\r\n/**\r\n * Ragdoll bone properties\r\n * @experimental\r\n */\r\nexport class RagdollBoneProperties {\r\n    /**\r\n     * Width of the box shape\r\n     */\r\n    width?: number;\r\n    /**\r\n     * depth of the box shape\r\n     */\r\n    depth?: number;\r\n    /**\r\n     * height of the box shape\r\n     */\r\n    height?: number;\r\n    /**\r\n     * size that will be used of width, depth and height of the shape box\r\n     */\r\n    size?: number;\r\n    /**\r\n     * Type of Physics Constraint used between bones\r\n     */\r\n    joint?: number | undefined;\r\n    /**\r\n     * Main rotation axis used by the constraint, in local space\r\n     */\r\n    rotationAxis?: Vector3;\r\n    /**\r\n     * Minimum rotation angle value\r\n     */\r\n    min?: number;\r\n    /**\r\n     * Maximum rotation angle value\r\n     */\r\n    max?: number;\r\n    /**\r\n     * Offset along local axis\r\n     */\r\n    boxOffset?: number;\r\n    /**\r\n     * Axis that need an offset\r\n     */\r\n    boneOffsetAxis?: Vector3;\r\n}\r\n\r\n/**\r\n * Ragdoll for Physics V2\r\n * @experimental\r\n */\r\nexport class Ragdoll {\r\n    private _skeleton: Skeleton;\r\n    private _scene: Scene;\r\n    private _mesh: Mesh;\r\n    private _config: any;\r\n    private _boxConfigs: Array<RagdollBoneProperties> = new Array<RagdollBoneProperties>();\r\n\r\n    private _bones: Array<Bone> = new Array<Bone>();\r\n    private _initialRotation: Array<Quaternion> = new Array<Quaternion>();\r\n    private _boneNames: string[] = [];\r\n    private _transforms: Array<TransformNode> = new Array<TransformNode>();\r\n    private _aggregates: Array<PhysicsAggregate> = new Array<PhysicsAggregate>();\r\n    private _ragdollMode: boolean = false;\r\n    private _rootBoneName: string = \"\";\r\n    private _rootBoneIndex: number = -1;\r\n    private _mass: number = 10;\r\n    private _restitution: number = 0;\r\n\r\n    /**\r\n     * Pause synchronization between physics and bone position/orientation\r\n     */\r\n    public pauseSync: boolean = false;\r\n\r\n    private _putBoxesInBoneCenter: boolean;\r\n    private _defaultJoint: number = PhysicsConstraintType.HINGE;\r\n    private _defaultJointMin: number = -90;\r\n    private _defaultJointMax: number = 90;\r\n\r\n    private _boneOffsetAxis: Vector3;\r\n\r\n    /**\r\n     * Construct a new Ragdoll object. Once ready, it can be made dynamic by calling `Ragdoll` method\r\n     * @param skeleton The skeleton containing bones to be physicalized\r\n     * @param mesh The mesh used by the skeleton\r\n     * @param config an array of `RagdollBoneProperties` corresponding to bones and their properties used to instanciate physics bodies\r\n     */\r\n    constructor(skeleton: Skeleton, mesh: Mesh, config: RagdollBoneProperties[]) {\r\n        this._skeleton = skeleton;\r\n        this._scene = skeleton.getScene();\r\n        this._mesh = mesh;\r\n        this._config = config; // initial, user defined box configs. May have several box configs jammed into 1 index.\r\n        this._boxConfigs = []; // final box configs. Every element is a separate box config (this.config may have several configs jammed into 1 index).\r\n        this._putBoxesInBoneCenter = false;\r\n        this._defaultJoint = PhysicsConstraintType.HINGE;\r\n        this._boneOffsetAxis = Axis.Y;\r\n    }\r\n\r\n    private _createColliders(): void {\r\n        this._mesh.computeWorldMatrix();\r\n\r\n        const config = this._config;\r\n        for (let i = 0; i < config.length; i++) {\r\n            const boneNames = config[i].bone !== undefined ? [config[i].bone] : config[i].bones;\r\n\r\n            for (let ii = 0; ii < boneNames.length; ii++) {\r\n                const currentBone = this._skeleton.bones[this._skeleton.getBoneIndexByName(boneNames[ii])];\r\n                if (currentBone == undefined) {\r\n                    return;\r\n                }\r\n\r\n                // First define the box dimensions, so we can then use them when calling CreateBox().\r\n                const currentRagdollBoneProperties: RagdollBoneProperties = {\r\n                    width: this._config[i].width,\r\n                    depth: this._config[i].depth,\r\n                    height: this._config[i].height,\r\n                    size: this._config[i].size,\r\n                };\r\n\r\n                currentRagdollBoneProperties.width = currentRagdollBoneProperties.width ?? currentRagdollBoneProperties.size;\r\n                currentRagdollBoneProperties.depth = currentRagdollBoneProperties.depth ?? currentRagdollBoneProperties.size;\r\n                currentRagdollBoneProperties.height = currentRagdollBoneProperties.height ?? currentRagdollBoneProperties.size;\r\n                const transform = new TransformNode(boneNames[ii] + \"_transform\", this._scene);\r\n\r\n                // Define the rest of the box properties.\r\n                currentRagdollBoneProperties.joint = config[i].joint !== undefined ? config[i].joint : this._defaultJoint;\r\n                currentRagdollBoneProperties.rotationAxis = config[i].rotationAxis !== undefined ? config[i].rotationAxis : Axis.X;\r\n                currentRagdollBoneProperties.min = config[i].min !== undefined ? config[i].min : this._defaultJointMin;\r\n                currentRagdollBoneProperties.max = config[i].max !== undefined ? config[i].max : this._defaultJointMax;\r\n\r\n                // Offset value.\r\n                let boxOffset = 0;\r\n                if ((config[i].putBoxInBoneCenter !== undefined && config[i].putBoxInBoneCenter) || this._putBoxesInBoneCenter) {\r\n                    if (currentBone.length === undefined) {\r\n                        Logger.Log(\"The length property is not defined for bone \" + currentBone.name);\r\n                    }\r\n                    boxOffset = currentBone.length / 2;\r\n                } else if (config[i].boxOffset !== undefined) {\r\n                    boxOffset = config[i].boxOffset;\r\n                }\r\n                currentRagdollBoneProperties.boxOffset = boxOffset;\r\n\r\n                // Offset axis.\r\n                const boneOffsetAxis = config[i].boneOffsetAxis !== undefined ? config[i].boneOffsetAxis : this._boneOffsetAxis;\r\n                const boneDir = currentBone.getDirection(boneOffsetAxis, this._mesh);\r\n                currentRagdollBoneProperties.boneOffsetAxis = boneOffsetAxis;\r\n\r\n                transform.position = currentBone.getAbsolutePosition(this._mesh).add(boneDir.scale(boxOffset));\r\n\r\n                const mass = config[i].mass !== undefined ? config[i].mass : this._mass;\r\n                const restitution = config[i].restitution !== undefined ? config[i].restitution : this._restitution;\r\n                const aggregate = new PhysicsAggregate(\r\n                    transform,\r\n                    PhysicsShapeType.BOX,\r\n                    {\r\n                        mass: mass,\r\n                        restitution: restitution,\r\n                        friction: 0.6,\r\n                        extents: new Vector3(currentRagdollBoneProperties.width, currentRagdollBoneProperties.height, currentRagdollBoneProperties.depth),\r\n                    },\r\n                    this._scene\r\n                );\r\n                aggregate.body.setCollisionCallbackEnabled(true);\r\n                aggregate.body.disablePreStep = false;\r\n                this._aggregates.push(aggregate);\r\n                this._bones.push(currentBone);\r\n                this._boneNames.push(currentBone.name);\r\n                this._transforms.push(transform);\r\n                this._boxConfigs.push(currentRagdollBoneProperties);\r\n                this._initialRotation.push(currentBone.getRotationQuaternion(Space.WORLD));\r\n            }\r\n        }\r\n    }\r\n\r\n    private _initJoints(): void {\r\n        this._mesh.computeWorldMatrix();\r\n        for (let i = 0; i < this._bones.length; i++) {\r\n            // The root bone has no joints.\r\n            if (i == this._rootBoneIndex) continue;\r\n\r\n            const nearestParent = this._findNearestParent(i);\r\n\r\n            if (nearestParent == null) {\r\n                Logger.Warn(\"Couldn't find a nearest parent bone in the configs for bone called \" + this._boneNames[i]);\r\n                return;\r\n            }\r\n\r\n            const boneParentIndex = this._boneNames.indexOf(nearestParent.name);\r\n\r\n            let distanceFromParentBoxToBone = this._bones[i].getAbsolutePosition(this._mesh).subtract(this._transforms[boneParentIndex].position);\r\n\r\n            const wmat = this._transforms[boneParentIndex].computeWorldMatrix();\r\n            const invertedWorldMat = Matrix.Invert(wmat);\r\n            distanceFromParentBoxToBone = Vector3.TransformCoordinates(this._bones[i].getAbsolutePosition(this._mesh), invertedWorldMat);\r\n\r\n            const boneAbsPos = this._bones[i].getAbsolutePosition(this._mesh);\r\n            const boxAbsPos = this._transforms[i].position.clone();\r\n            const myConnectedPivot = boneAbsPos.subtract(boxAbsPos);\r\n\r\n            const joint = new BallAndSocketConstraint(\r\n                distanceFromParentBoxToBone,\r\n                myConnectedPivot,\r\n                this._boxConfigs[i].rotationAxis!,\r\n                this._boxConfigs[i].rotationAxis!,\r\n                this._scene\r\n            );\r\n            this._aggregates[boneParentIndex].body.addConstraint(this._aggregates[i].body, joint);\r\n        }\r\n    }\r\n\r\n    private _syncBonesAndBoxes(): void {\r\n        if (this.pauseSync) {\r\n            return;\r\n        }\r\n\r\n        if (this._ragdollMode) {\r\n            this._bones[this._rootBoneIndex].getDirectionToRef(this._boxConfigs[this._rootBoneIndex].boneOffsetAxis!, this._mesh, TmpVectors.Vector3[0]);\r\n            TmpVectors.Vector3[0].scaleInPlace(this._boxConfigs[this._rootBoneIndex].boxOffset!);\r\n            this._bones[this._rootBoneIndex].getAbsolutePositionToRef(this._mesh, TmpVectors.Vector3[1]);\r\n            TmpVectors.Vector3[1].addInPlace(TmpVectors.Vector3[0]);\r\n\r\n            this._bones[this._rootBoneIndex].setAbsolutePosition(this._transforms[this._rootBoneIndex].position, this._mesh);\r\n            this._addImpostorRotationToBone(this._rootBoneIndex);\r\n\r\n            const rootPos = this._aggregates[this._rootBoneIndex].body.transformNode.position;\r\n\r\n            // Move the mesh, to guarantee alignment between root bone and impostor box position\r\n            TmpVectors.Vector3[1].subtractToRef(rootPos, TmpVectors.Vector3[0]);\r\n            this._mesh.position.subtractToRef(TmpVectors.Vector3[0], this._mesh.position);\r\n\r\n            for (let i = 0; i < this._bones.length; i++) {\r\n                if (i == this._rootBoneIndex) continue;\r\n                this._addImpostorRotationToBone(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _addImpostorRotationToBone(boneIndex: number): void {\r\n        const qmesh = this._mesh.rotationQuaternion ?? Quaternion.FromEulerAngles(this._mesh.rotation.x, this._mesh.rotation.y, this._mesh.rotation.z);\r\n        const qbind = this._initialRotation[boneIndex];\r\n        const qphys = this._aggregates[boneIndex].body?.transformNode?.rotationQuaternion!;\r\n\r\n        // TmpVectors.Quaternion[1] = mesh.rotation * this._initialRotation[boneIndex]\r\n        // TmpVectors.Quaternion[0] = body.rotation *  TmpVectors.Quaternion[1]\r\n        qmesh.multiplyToRef(qbind, TmpVectors.Quaternion[1]);\r\n        qphys.multiplyToRef(TmpVectors.Quaternion[1], TmpVectors.Quaternion[0]);\r\n\r\n        this._bones[boneIndex].setRotationQuaternion(TmpVectors.Quaternion[0], Space.WORLD, this._mesh);\r\n    }\r\n\r\n    // Return true if root bone is valid/exists in this.bonesNames. false otherwise.\r\n    private _defineRootBone(): boolean {\r\n        const skeletonRoots = this._skeleton.getChildren();\r\n        if (skeletonRoots.length != 1) {\r\n            Logger.Log(\"Ragdoll creation failed: there can only be one root in the skeleton.\");\r\n            return false;\r\n        }\r\n\r\n        this._rootBoneName = skeletonRoots[0].name;\r\n        this._rootBoneIndex = this._boneNames.indexOf(this._rootBoneName);\r\n        if (this._rootBoneIndex == -1) {\r\n            Logger.Log(\"Ragdoll creation failed: the array boneNames doesn't have the root bone. The root bone is \" + this._skeleton.getChildren());\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private _findNearestParent(boneIndex: number): any {\r\n        let nearestParent: Nullable<Bone> | undefined = this._bones[boneIndex].getParent();\r\n        do {\r\n            if (nearestParent != null && this._boneNames.includes(nearestParent.name)) {\r\n                break;\r\n            }\r\n\r\n            nearestParent = nearestParent?.getParent();\r\n        } while (nearestParent != null);\r\n\r\n        return nearestParent;\r\n    }\r\n\r\n    private _init() {\r\n        // detach bones with link transform to let physics have control\r\n        this._skeleton.bones.forEach((bone) => {\r\n            bone.linkTransformNode(null);\r\n        });\r\n\r\n        this._createColliders();\r\n\r\n        // If this.defineRootBone() returns false... there is not root bone.\r\n        if (!this._defineRootBone()) {\r\n            return;\r\n        }\r\n\r\n        this._initJoints();\r\n        this._scene.registerBeforeRender(() => {\r\n            this._syncBonesAndBoxes();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Enable ragdoll mode. Create physics objects and make them dynamic.\r\n     */\r\n    public ragdoll(): void {\r\n        if (!this._ragdollMode) {\r\n            this._ragdollMode = true;\r\n            this._init();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose resources and remove physics objects\r\n     */\r\n    dispose(): void {\r\n        this._aggregates.forEach((aggregate: PhysicsAggregate) => {\r\n            aggregate.dispose();\r\n        });\r\n    }\r\n}\r\n"]}